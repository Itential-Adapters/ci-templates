name: Central CI Pipeline

on: [workflow_call]

jobs:
  node14:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.18.0]
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-14-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-14-
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install

  node16:
    runs-on: ubuntu-latest
    needs: node14
    strategy:
      matrix:
        node-version: [16.4.0]
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-16-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-16-
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install

  node18:
    runs-on: ubuntu-latest
    needs: node16
    strategy:
      matrix:
        node-version: [18.15.0]
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-18-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-18-
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install

  node20:
    runs-on: ubuntu-latest
    needs: node18
    strategy:
      matrix:
        node-version: [20.9.0]
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-20-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-
            ${{ runner.os }}-node-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install

  generate_artifacts:
    runs-on: ubuntu-latest
    needs: node20
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Generate TAB1 and TAB2 artifacts
        run: |
          mkdir -p tabUtils
          wget -q -P ./tabUtils https://gitlab.com/itentialopensource/opensource-common-utils/-/raw/master/documentation-pipeline-tool.js
          wget -q -P ./tabUtils https://gitlab.com/itentialopensource/opensource-common-utils/-/raw/master/projectTypeTemplates/project-templates.md
          wget -q -P ./tabUtils https://gitlab.com/itentialopensource/opensource-common-utils/-/raw/master/projectTypeTemplates/adapter-template.md
          chmod +x tabUtils/documentation-pipeline-tool.js
          node ./tabUtils/documentation-pipeline-tool.js -p "${{ github.workspace }}" -u "${{ github.repository }}"
        continue-on-error: true

  lint:
    runs-on: ubuntu-latest
    needs: generate_artifacts
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-lint-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-lint-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Install dependencies
        run: npm install
      - name: Run linter
        run: npm run lint

  code_quality:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Run Code Quality
        run: |
          export SP_VERSION=$(echo "$GITHUB_SERVER_URL" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
          docker run \
            --env SOURCE_CODE="$PWD" \
            --volume "$PWD":/code \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
        continue-on-error: true
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: gl-code-quality-report
          path: gl-code-quality-report.json

  security:
    runs-on: ubuntu-latest
    needs: code_quality
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-security-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-security-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Install dependencies
        run: npm install
      - name: Run Security Audit
        run: npm audit --registry=https://registry.npmjs.org --audit-level=high

  unit_tests:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-unit-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-unit-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Install dependencies
        run: npm install
      - name: Run Unit Tests
        run: npm run test:unit

  integration_tests:
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - uses: actions/checkout@v2
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-integration-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-integration-
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Install dependencies
        run: npm install
      - name: Run Integration Tests
        run: npm run test:integration

  commit_artifacts:
    runs-on: ubuntu-latest
    needs: integration_tests
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
      - name: Commit TAB1 and TAB2
        run: |
          git add TAB1.md
          git add TAB2.md
          git commit -m "Updating generated TAB1 and TAB2 [skip ci]" || echo "No changes to commit"
          git push
        continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: commit_artifacts
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/')
    steps:
      - uses: actions/checkout@v2
      - name: Verify author and repository
        run: |
          if [ "$(cat package.json | jq -r '.author')" != "Itential" ]; then
            echo "Error: Invalid author in package.json"
            exit 1
          fi
          URL="https://github.com/${{ github.repository }}/info/refs?service=git-upload-pack"
          wget $URL
      - name: Deploy
        run: |
          # Add deployment steps here

  # s3:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Upload to S3
  #       uses: aws-actions/s3-sync@v1
  #       with:
  #         args: --acl public-read --follow-symlinks
  #       env:
  #         AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         SOURCE_DIR: './dist'
  #         DEST_DIR: 's3://${{ secrets.AWS_S3_BUCKET }}/'
